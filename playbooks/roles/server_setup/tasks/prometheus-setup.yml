---
- name: Download prometheus archive (async)
  ansible.builtin.get_url:
    url: "https://github.com/prometheus/prometheus/releases/download/{{ prometheus_version }}/{{ prometheus_package_name }}.tar.gz"
    dest: "/tmp/{{ prometheus_package_name }}.tar.gz"
    mode: '0644'
  async: 300
  poll: 0
  register: prometheus_async

- name: Add prometheus user
  become: true
  ansible.builtin.user:
    name: '{{ prometheus_user }}'
    shell: /bin/false
    state: present
    create_home: false

- name: Create prometheus directories
  become: true
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: '{{ prometheus_user }}'
    group: '{{ prometheus_user }}'
  loop:
    - /etc/prometheus
    - /var/lib/prometheus

- name: Wait for Prometheus download to complete
  ansible.builtin.async_status:
    jid: "{{ prometheus_async.ansible_job_id }}"
  register: prometheus_async_status
  until: prometheus_async_status.finished
  retries: 100
  delay: 5

- name: Unarchive prometheus
  ansible.builtin.unarchive:
    src: "/tmp/{{ prometheus_package_name }}.tar.gz"
    dest: /tmp/
    remote_src: true

- name: Copy prometheus and promtool executables
  become: true
  ansible.builtin.copy:
    src: '{{ item }}'
    dest: /usr/local/bin/
    group: '{{ prometheus_user }}'
    owner: '{{ prometheus_user }}'
    remote_src: true
    mode: preserve
  loop:
    - "/tmp/{{ prometheus_package_name }}/prometheus"
    - "/tmp/{{ prometheus_package_name }}/promtool"

- name: Copy prometheus console
  become: true
  ansible.builtin.copy:
    src: '{{ item }}'
    dest: /etc/prometheus/
    remote_src: true
    group: '{{ prometheus_user }}'
    owner: '{{ prometheus_user }}'
    mode: preserve
  loop:
    - "/tmp/{{ prometheus_package_name }}/consoles"
    - "/tmp/{{ prometheus_package_name }}/console_libraries"

- name: Copy Prometheus main and web configuration file
  become: true
  ansible.builtin.copy:
    src: files/prometheus/prometheus.yml
    dest: /etc/prometheus/
    group: '{{ prometheus_user }}'
    owner: '{{ prometheus_user }}'


- name: Copy Prometheus service file
  become: true
  ansible.builtin.copy:
    src: files/prometheus/prometheus.service
    dest: /etc/systemd/system/

- name: Reload systemctl daemon
  become: true
  ansible.builtin.systemd:
    daemon_reload: true
    name: prometheus
    state: restarted
    enabled: true

- name: Open prometheus port on firewall
  become: true
  ansible.posix.firewalld:
    port: 9090/tcp
    permanent: true
    state: enabled
    immediate: true

## Setup Grafana

- name: Create Grafana directories
  ansible.builtin.file:
    path: /mnt/media/Grafana
    state: directory
    mode: '0755'
    owner: '{{ superuser_name }}'
    group: '{{ superuser_name }}'

- name: Get user id
  become: true
  ansible.builtin.getent:
    database: passwd
    key: '{{ superuser_name }}'
    split: ':'
  register: getent_output

- name: Print getent output
  ansible.builtin.debug:
    msg: "{{ getent_output.ansible_facts.getent_passwd[superuser_name][1] }}"


- name: Pull and run Grafana
  community.docker.docker_container:
    name: grafana
    image: "grafana/grafana:11.6.3"
    state: started
    restart_policy: "unless-stopped"
    user: "{{ getent_output.ansible_facts.getent_passwd[superuser_name][1] }}"
    recreate: true
    volumes:
      - /mnt/media/Grafana:/var/lib/grafana
      - /mnt/media/Grafana/img:/usr/share/grafana/public/img/
    ports:
      - 3000:3000

- name: Download Grafana dashboard images
  ansible.builtin.get_url:
    url: "{{ item.src }}"
    dest: "/mnt/media/Grafana/img/{{ item.dest }}"
    owner: '{{ superuser_name }}'
    group: '{{ superuser_name }}'
  loop: "{{ dashboards_images }}"


## Setup Loki

- name: Create Loki directories
  ansible.builtin.file:
    path: /mnt/media-nvm/Loki
    state: directory
    mode: '0755'
    owner: '{{ superuser_name }}'
    group: '{{ superuser_name }}'

- name: Copy Loki configuration file
  ansible.posix.synchronize:
    src: files/loki/loki-config.yaml
    dest: /mnt/media-nvm/Loki/loki-config.yaml

- name: Pull and run Loki
  community.docker.docker_container:
    name: loki
    image: "grafana/loki:3.5.1"
    restart_policy: "unless-stopped"
    ports:
      - 3100:3100
    recreate: true
    volumes:
      - "/mnt/media-nvm/Loki/loki-config.yaml:/etc/loki/loki-config.yaml"
      - "/mnt/media-nvm/Loki/data:/data/loki"
    command: -config.file=/etc/loki/loki-config.yaml

## Setup Promtail

- name: Create Promtail directories
  ansible.builtin.file:
    path: /mnt/media-nvm/Promtail/config
    state: directory
    mode: '0755'
    owner: '{{ superuser_name }}'
    group: '{{ superuser_name }}'

- name: Copy Promtail configuration file
  ansible.posix.synchronize:
    src: files/promtail/promtail-config.yaml
    dest: /mnt/media-nvm/Promtail/config/promtail-config.yaml

- name: Pull and run Promtail
  community.docker.docker_container:
    name: promtail
    image: grafana/promtail:3.5.1
    recreate: true
    restart_policy: "unless-stopped"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /mnt/media-nvm/Promtail/config/promtail-config.yaml:/etc/promtail/promtail-config.yaml
    command: -config.file=/etc/promtail/promtail-config.yaml

...