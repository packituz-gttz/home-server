---
- name: Download prometheus
  ansible.builtin.unarchive:
    src: 'https://github.com/prometheus/prometheus/releases/download/{{ prometheus_version }}/{{ prometheus_package_name }}.tar.gz'
    dest: /tmp/
    remote_src: true

- name: Add prometheus user
  ansible.builtin.user:
    name: '{{ prometheus_user }}'
    shell: /bin/false
    state: present
    create_home: false

- name: Create prometheus directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: '{{ prometheus_user }}'
    group: '{{ prometheus_user }}'
  loop:
    - /etc/prometheus
    - /var/lib/prometheus

- name: Copy prometheus and promtool executables
  ansible.builtin.copy:
    src: '{{ item }}'
    dest: /usr/local/bin/
    group: '{{ prometheus_user }}'
    owner: '{{ prometheus_user }}'
    remote_src: true
    mode: preserve
  loop:
    - "/tmp/{{ prometheus_package_name }}/prometheus"
    - "/tmp/{{ prometheus_package_name }}/promtool"

- name: Copy prometheus console
  ansible.builtin.copy:
    src: '{{ item }}'
    dest: /etc/prometheus/
    remote_src: true
    group: '{{ prometheus_user }}'
    owner: '{{ prometheus_user }}'
    mode: preserve
  loop:
    - "/tmp/{{ prometheus_package_name }}/consoles"
    - "/tmp/{{ prometheus_package_name }}/console_libraries"

- name: Copy Prometheus main and web configuration file
  ansible.builtin.copy:
    src: files/prometheus/prometheus.yml
    dest: /etc/prometheus/
    group: '{{ prometheus_user }}'
    owner: '{{ prometheus_user }}'


- name: Copy Prometheus service file
  ansible.builtin.copy:
    src: files/prometheus/prometheus.service
    dest: /etc/systemd/system/

- name: Reload systemctl daemon
  ansible.builtin.systemd:
    daemon_reload: true
    name: prometheus
    state: restarted
    enabled: true

- name: Open prometheus port on firewall
  ansible.posix.firewalld:
    port: 9090/tcp
    permanent: true
    state: enabled
    immediate: true

#    Setup Node Exporter

- name: Add node_exporter user
  ansible.builtin.user:
    name: '{{ node_exporter_user }}'
    shell: /bin/false
    state: present
    create_home: false

- name: Download node exporter
  ansible.builtin.unarchive:
    src: 'https://github.com/prometheus/node_exporter/releases/download/v1.8.2/node_exporter-1.8.2.linux-amd64.tar.gz'
    dest: /tmp/
    remote_src: true

- name: Copy node exporter executable
  ansible.builtin.copy:
    src: /tmp/node_exporter-1.8.2.linux-amd64/node_exporter
    dest: /usr/local/bin/
    group: '{{ node_exporter_user }}'
    owner: '{{ node_exporter_user }}'
    remote_src: true
    mode: preserve

- name: Copy Node Exporter service file
  ansible.builtin.copy:
    src: files/node_exporter/node_exporter.service
    dest: /etc/systemd/system/

- name: Reload systemctl daemon
  ansible.builtin.systemd:
    daemon_reload: true
    name: node_exporter
    state: restarted
    enabled: true

# Setup cAdvisor

- name: Setup cAdvisor
  community.docker.docker_container:
    name: cadvisor
    image: "gcr.io/cadvisor/cadvisor:v0.50.0"
    state: started
    restart_policy: "unless-stopped"
    recreate: true
    ports:
      - 8080:8080
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro

# Setup prometheus_folder_size_exporter

- name: Install cargo
  ansible.builtin.dnf:
    name: cargo
    state: present

- name: Install prometheus_folder_size_exporter
  community.general.cargo:
    name: prometheus_folder_size_exporter
    state: present
    path: /usr/local/

- name: Create directory for prometheus_folder_size_exporter configurations
  ansible.builtin.file:
    path: /opt/prometheus_folder_size_exporter
    state: directory
    mode: '0755'

- name: Set permissions for prometheus_folder_size_exporter executable
  ansible.builtin.file:
    path: /usr/local/bin/prometheus_folder_size_exporter
    group: '{{ node_exporter_user }}'
    owner: '{{ node_exporter_user }}'

- name: Set SELinux context for prometheus_folder_size_exporter binary
  ansible.builtin.sefcontext:
    target: /usr/local/bin/prometheus_folder_size_exporter
    setype: bin_t
    state: present

- name: Apply new SELinux file context to filesystem
  ansible.builtin.command: restorecon -irv /usr/local/bin/prometheus_folder_size_exporter


- name: Copy prometheus_folder_size_exporter configurations
  ansible.builtin.copy:
    src: "{{ item.source }}"
    dest: "{{ item.destination }}"
  loop:
    - { source: 'prometheus_folder_size_exporter/prometheus_folder_size_exporter.service', destination: '/etc/systemd/system/' }
    - { source: 'prometheus_folder_size_exporter/prometheus_folder_size_exporter.json', destination: '/opt/prometheus_folder_size_exporter/' }

- name: Reload systemctl daemon
  ansible.builtin.systemd:
    daemon_reload: true
    name: prometheus_folder_size_exporter
    state: restarted
    enabled: true

## Setup Blackbox exporter

- name: Add blackbox_exporter user
  ansible.builtin.user:
    name: '{{ blackbox_exporter_user }}'
    shell: /bin/false
    state: present
    create_home: false

- name: Create blackbox directories
  ansible.builtin.file:
    path: /etc/blackbox
    state: directory
    owner: '{{ blackbox_exporter_user }}'
    group: '{{ blackbox_exporter_user }}'

- name: Download Blackbox exporter
  ansible.builtin.unarchive:
    src: 'https://github.com/prometheus/blackbox_exporter/releases/download/v0.25.0/blackbox_exporter-0.25.0.linux-amd64.tar.gz'
    dest: /tmp/
    remote_src: true

- name: Copy Blackbox exporter executable
  ansible.builtin.copy:
    src: /tmp/blackbox_exporter-0.25.0.linux-amd64/blackbox_exporter
    dest: /usr/local/bin/
    group: '{{ blackbox_exporter_user }}'
    owner: '{{ blackbox_exporter_user }}'
    remote_src: true
    mode: preserve

- name: Copy Blackbox Exporter service file
  ansible.builtin.copy:
    src: files/blackbox_exporter/blackbox_exporter.service
    dest: /etc/systemd/system/

- name: Copy Blackbox configuration file
  ansible.builtin.copy:
    src: files/blackbox_exporter/blackbox.yml
    dest: /etc/blackbox/

- name: Reload systemctl daemon
  ansible.builtin.systemd:
    daemon_reload: true
    name: blackbox_exporter
    state: restarted
    enabled: true

# Setup PixAI exporter

- name: Download Grafana dashboard images
  ansible.builtin.get_url:
    url: https://github.com/packituz-gttz/pixai-exporter/releases/download/v0.1.2-alpha/pixai_exporter
    dest: /usr/local/bin/
    owner: '{{ node_exporter_user }}'
    group: '{{ node_exporter_user }}'
    mode: '0775'

- name: Copy PixAI Exporter service file
  ansible.builtin.template:
    src: pixai_exporter/pixai_exporter.service
    dest: /etc/systemd/system/pixai_exporter.service

- name: Reload systemctl daemon
  ansible.builtin.systemd:
    daemon_reload: true
    name: pixai_exporter
    state: restarted
    enabled: true

## Setup Grafana

- name: Create Grafana directories
  ansible.builtin.file:
    path: /mnt/media/Grafana
    state: directory
    mode: '0755'
    owner: '{{ superuser_name }}'
    group: '{{ superuser_name }}'
  loop:
      - /mnt/media/Grafana
      - /mnt/media/Grafana/img

- name: Obtain id for super user
  block:
  - name: Get user id
    ansible.builtin.getent:
      database: passwd
      key: '{{ superuser_name }}'
      split: ':'
    register: getent_output

- name: Print getent output
  ansible.builtin.debug:
    msg: "{{ getent_output.ansible_facts.getent_passwd[superuser_name][1] }}"


- name: Pull and run Grafana
  community.docker.docker_container:
    name: grafana
    image: "grafana/grafana:11.2.2"
    state: started
    restart_policy: "unless-stopped"
    user: "{{ getent_output.ansible_facts.getent_passwd[superuser_name][1] }}"
    recreate: true
    volumes:
      - /mnt/media/Grafana:/var/lib/grafana
      - /mnt/media/Grafana/img:/usr/share/grafana/public/img/
    ports:
      - 3000:3000

- name: Download Grafana dashboard images
  ansible.builtin.get_url:
    url: "{{ item.src }}"
    dest: "/mnt/media/Grafana/img/{{ item.dest }}"
    owner: '{{ superuser_name }}'
    group: '{{ superuser_name }}'
  loop: "{{ dashboards_images }}"


...