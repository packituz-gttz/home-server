name: Deploy
on:
  push:
    branches:
      - master
    paths:
      - playbooks/**
      - uv.lock
      - pyproject.toml
      - .github/**

concurrency:
  group: ci-${{ github.event_name == 'pull_request' && github.base_ref || github.ref }}
  cancel-in-progress: false

jobs:
  deploy-media:
    uses: ./.github/workflows/reusable-playbook-workflow.yaml
    with:
      playbook_params: '--tags media-group'
    secrets:
      ANSIBLE_VAULT_PASSWORD: ${{ secrets.ANSIBLE_VAULT_PASSWORD }}
      SERVER_SSH_ADDRESS: ${{ secrets.SERVER_SSH_ADDRESS }}
      SSH_KEY: ${{ secrets.SSH_KEY }}

  deploy-base:
    uses: ./.github/workflows/reusable-playbook-workflow.yaml
    with:
      playbook_params: '--tags jump-setup,dronegc-setup'
    secrets:
      ANSIBLE_VAULT_PASSWORD: ${{ secrets.ANSIBLE_VAULT_PASSWORD }}
      SERVER_SSH_ADDRESS: ${{ secrets.SERVER_SSH_ADDRESS }}
      SSH_KEY: ${{ secrets.SSH_KEY }}

  deploy-utils:
    if: contains(join(github.event.commits.*.modified, ','), '/utils/') || contains(join(github.event.commits.*.modified, ','), 'tasks/main.yml')
    uses: ./.github/workflows/reusable-playbook-workflow.yaml
    with:
      playbook_params: '--tags utils-group'
    secrets:
      ANSIBLE_VAULT_PASSWORD: ${{ secrets.ANSIBLE_VAULT_PASSWORD }}
      SERVER_SSH_ADDRESS: ${{ secrets.SERVER_SSH_ADDRESS }}
      SSH_KEY: ${{ secrets.SSH_KEY }}

  deploy-monit:
    if: contains(join(github.event.commits.*.modified, ','), '/monit/') || contains(join(github.event.commits.*.modified, ','), 'tasks/main.yml')
    uses: ./.github/workflows/reusable-playbook-workflow.yaml
    with:
      playbook_params: '--tags monit-group'
    secrets:
      ANSIBLE_VAULT_PASSWORD: ${{ secrets.ANSIBLE_VAULT_PASSWORD }}
      SERVER_SSH_ADDRESS: ${{ secrets.SERVER_SSH_ADDRESS }}
      SSH_KEY: ${{ secrets.SSH_KEY }}


  deploy-gaming:
    if: contains(join(github.event.commits.*.modified, ','), '/gaming/') || contains(join(github.event.commits.*.modified, ','), 'tasks/main.yml')
    uses: ./.github/workflows/reusable-playbook-workflow.yaml
    with:
      playbook_params: '--tags gaming-group'
    secrets:
      ANSIBLE_VAULT_PASSWORD: ${{ secrets.ANSIBLE_VAULT_PASSWORD }}
      SERVER_SSH_ADDRESS: ${{ secrets.SERVER_SSH_ADDRESS }}
      SSH_KEY: ${{ secrets.SSH_KEY }}


  deploy-downloaders:
    if: contains(join(github.event.commits.*.modified, ','), '/downloaders/') || contains(join(github.event.commits.*.modified, ','), 'tasks/main.yml')
    uses: ./.github/workflows/reusable-playbook-workflow.yaml
    with:
      playbook_params: '--tags downloaders-group'
    secrets:
      ANSIBLE_VAULT_PASSWORD: ${{ secrets.ANSIBLE_VAULT_PASSWORD }}
      SERVER_SSH_ADDRESS: ${{ secrets.SERVER_SSH_ADDRESS }}
      SSH_KEY: ${{ secrets.SSH_KEY }}

  deploy-ai:
    if: contains(join(github.event.commits.*.modified, ','), '/ai/') || contains(join(github.event.commits.*.modified, ','), 'tasks/main.yml')
    uses: ./.github/workflows/reusable-playbook-workflow.yaml
    with:
      playbook_params: '--tags ai-group'
    secrets:
      ANSIBLE_VAULT_PASSWORD: ${{ secrets.ANSIBLE_VAULT_PASSWORD }}
      SERVER_SSH_ADDRESS: ${{ secrets.SERVER_SSH_ADDRESS }}
      SSH_KEY: ${{ secrets.SSH_KEY }}

  deploy-sablier:
    if: ${{ always() }}
    uses: ./.github/workflows/reusable-playbook-workflow.yaml
    with:
      playbook_params: '--tags sablier-setup'
    needs: [ deploy-base, deploy-media, deploy-utils, deploy-gaming, deploy-downloaders, deploy-ai ]
    secrets:
      ANSIBLE_VAULT_PASSWORD: ${{ secrets.ANSIBLE_VAULT_PASSWORD }}
      SERVER_SSH_ADDRESS: ${{ secrets.SERVER_SSH_ADDRESS }}
      SSH_KEY: ${{ secrets.SSH_KEY }}

  deploy-cadvisor:
    if: contains(join(github.event.commits.*.modified, ','), 'monitoring/') || contains(join(github.event.commits.*.modified, ','), 'tasks/main.yml')
    uses: ./.github/workflows/reusable-playbook-workflow.yaml
    with:
      playbook_params: '--tags cadvisor-setup'
    secrets:
      ANSIBLE_VAULT_PASSWORD: ${{ secrets.ANSIBLE_VAULT_PASSWORD }}
      SERVER_SSH_ADDRESS: ${{ secrets.SERVER_SSH_ADDRESS }}
      SSH_KEY: ${{ secrets.SSH_KEY }}

  deploy-foldersize:
    if: contains(join(github.event.commits.*.modified, ','), '/monitoring/') || contains(join(github.event.commits.*.modified, ','), 'tasks/main.yml')
    uses: ./.github/workflows/reusable-playbook-workflow.yaml
    with:
      playbook_params: '--tags foldersize-setup'
    secrets:
      ANSIBLE_VAULT_PASSWORD: ${{ secrets.ANSIBLE_VAULT_PASSWORD }}
      SERVER_SSH_ADDRESS: ${{ secrets.SERVER_SSH_ADDRESS }}
      SSH_KEY: ${{ secrets.SSH_KEY }}

  deploy-blackbox:
    if: contains(join(github.event.commits.*.modified, ','), '/monitoring/') || contains(join(github.event.commits.*.modified, ','), 'tasks/main.yml')
    uses: ./.github/workflows/reusable-playbook-workflow.yaml
    with:
      playbook_params: '--tags blackbox-setup'
    secrets:
      ANSIBLE_VAULT_PASSWORD: ${{ secrets.ANSIBLE_VAULT_PASSWORD }}
      SERVER_SSH_ADDRESS: ${{ secrets.SERVER_SSH_ADDRESS }}
      SSH_KEY: ${{ secrets.SSH_KEY }}

  deploy-node:
    if: contains(join(github.event.commits.*.modified, ','), '/monitoring/') || contains(join(github.event.commits.*.modified, ','), 'tasks/main.yml')
    uses: ./.github/workflows/reusable-playbook-workflow.yaml
    with:
      playbook_params: '--tags node-setup'
    secrets:
      ANSIBLE_VAULT_PASSWORD: ${{ secrets.ANSIBLE_VAULT_PASSWORD }}
      SERVER_SSH_ADDRESS: ${{ secrets.SERVER_SSH_ADDRESS }}
      SSH_KEY: ${{ secrets.SSH_KEY }}

  deploy-monitoring:
    if: contains(join(github.event.commits.*.modified, ','), '/monitoring/') || contains(join(github.event.commits.*.modified, ','), 'tasks/main.yml')
    uses: ./.github/workflows/reusable-playbook-workflow.yaml
    with:
      playbook_params: '--tags prometheus-setup'
    needs: [ deploy-cadvisor, deploy-foldersize, deploy-blackbox, deploy-node ]
    secrets:
      ANSIBLE_VAULT_PASSWORD: ${{ secrets.ANSIBLE_VAULT_PASSWORD }}
      SERVER_SSH_ADDRESS: ${{ secrets.SERVER_SSH_ADDRESS }}
      SSH_KEY: ${{ secrets.SSH_KEY }}

  print-modified-files:
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Print modified files
        run: |
          echo "Modified files in all commits:"
          echo "${{ toJson(github.event.commits.*.modified) }}"
